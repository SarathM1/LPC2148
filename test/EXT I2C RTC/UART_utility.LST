ARM COMPILER V2.53,  UART_utility                                                          03/05/13  17:42:39  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE UART_utility
OBJECT MODULE PLACED IN UART_utility.OBJ
COMPILER INVOKED BY: C:\Program Files\ARM\BIN\CA.exe UART_utility.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          /**************************************************************************************************
    2          
    3              #######################################################################
    4              ##                                                                   ##
    5              ##      Important : Not to be Disclosed to the Clients..             ##
    6              ##      This is transferred into as an object File and...            ##
    7              ##      is included only for the Company's Development Purpose...    ##
    8              ##                                                                   ##
    9              ##      © Pantech Solutions | All rights Reserved.                   ##
   10              ##                                                                   ##
   11              #######################################################################
   12          
   13              UART0 and UART1 Configuration code
   14              ----------------------------------------
   15              
   16              Description
   17              -----------
   18              Configures the UARTs of ARM LPC21xx
   19          
   20              Test configuration:
   21              -------------------
   22              Oscillator:      12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   23          
   24          **************************************************************************************************/
   25          
   26          #include <LPC213x.h>
   27          #include "UART.h"
   28          
   29          
   30          #define _PCLK 30000000  // Define PCLK for configuration baudrate
   31          
   32          
   33          
   34          void DelayMS(void)
   35          {
   36   1          unsigned int i,j;
   37   1          for(i=0;i<20;i++)
   38   1              for(j=0;j<300;j++);
   39   1      }
   40          void UART1_Init(unsigned int _baudrate)
   41          {
   42   1          unsigned short u1dl;    
   43   1          u1dl = _PCLK/(16*_baudrate);    // Calculate for U1DL value
   44   1          PINSEL0 |= 0x00050000;  // Enable rx,tx
   45   1          U1LCR = 0x00000083;     // 8 bit data,1 stop bit,no parity bit
   46   1          U1DLL = u1dl & 0xFF;    // U1DL for low byte
   47   1          U1DLM = (u1dl>>8);      // U1DL for high byte
   48   1          U1LCR = 0x00000003;     // DLAB =0
   49   1      }
   50          //------------------------------------------------------------------------------------------------//
   51          //---------------------------- Function for send character 1 time via UART1-----------------------//
   52          //------------------------------------------------------------------------------------------------//
   53          void UART1_PutC(char c)
   54          {
   55   1          while(!(U1LSR & 0x20)); // Wait until UART1 ready to send character     
   56   1          U1THR = c; 
   57   1          DelayMS();               // Send character
   58   1      }
   59          //------------------------------------------------------------------------------------------------//
ARM COMPILER V2.53,  UART_utility                                                          03/05/13  17:42:39  PAGE 2   

   60          //---------------------------- Function for send string via UART1---------------------------------//
   61          //------------------------------------------------------------------------------------------------//
   62          void UART1_PutS(char *p)
   63          {
   64   1          while(*p) // Point to character
   65   1          {
   66   2              UART1_PutC(*p++);   // Send character then point to next character
   67   2          }
   68   1      }
   69          //------------------------------------------------------------------------------------------------//
   70          //---------------------------- Function for Initial UART0 ----------------------------------------//
   71          //------------------------------------------------------------------------------------------------//
   72          void UART0_Init(unsigned int _baudrate)
   73          {
   74   1          unsigned short u0dl;
   75   1          u0dl = _PCLK/(16*_baudrate); // Calculate for U0DL value
   76   1          PINSEL0 |= 0x00000005;  // Enable rx,tx
   77   1          U0LCR = 0x00000083;     // 8 bit data,1 stop bit,no parity bit
   78   1          U0DLL = u0dl & 0xFF;    // U0DL for low byte
   79   1          U0DLM = (u0dl>>8);      // U0DL for high byte
   80   1          U0LCR = 0x00000003;     // DLAB =0
   81   1      }
   82          //------------------------------------------------------------------------------------------------//
   83          //---------------------------- Function for send character 1 time via UART0-----------------------//
   84          //------------------------------------------------------------------------------------------------//
   85          void UART0_PutC(char c)
   86          {
   87   1          while(!(U0LSR & 0x20)); // Wait until UART0 ready to send character  
   88   1          U0THR = c; // Send character
   89   1          DelayMS();
   90   1      }
   91          //------------------------------------------------------------------------------------------------//
   92          //---------------------------- Function for send string via UART1---------------------------------//
   93          //------------------------------------------------------------------------------------------------//
   94          void UART0_PutS(char *p)
   95          {
   96   1          while(*p) // Point to character
   97   1          {
   98   2              UART0_PutC(*p++);  // Send character then point to next character
   99   2          }
  100   1      }
ARM COMPILER V2.53,  UART_utility                                                          03/05/13  17:42:39  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (?C?UDIV?T)



*** PUBLICS:
 PUBLIC         UART1_Init?T
 PUBLIC         UART1_PutC?T
 PUBLIC         UART1_PutS?T
 PUBLIC         UART0_Init?T
 PUBLIC         UART0_PutC?T
 PUBLIC         UART0_PutS?T
 PUBLIC         DelayMS?T



*** CODE SEGMENT '?PR?DelayMS?T?UART_utility':
   35: {
 00000000            ; SCOPE-START
   37:     for(i=0;i<20;i++)
 00000000  2000      MOV         R0,#0x0
 00000002  ---- Variable 'i' assigned to Register 'R0' ----
   38:         for(j=0;j<300;j++);
 00000002          L_10:
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'j' assigned to Register 'R1' ----
 00000004          L_6:
 00000004  3101      ADD         R1,#0x1
 00000006  1C0A      MOV         R2,R1 ; j
 00000008  4B4B      LDR         R3,=0x12C
 0000000A  429A      CMP         R2,R3 ; j
 0000000C  D3FA      BCC         L_6  ; T=0x00000004
 0000000E  3001      ADD         R0,#0x1
 00000010  1C01      MOV         R1,R0 ; i
 00000012  2914      CMP         R1,#0x14 ; i
 00000014  D3F5      BCC         L_10  ; T=0x00000002
 00000016            ; SCOPE-END
   39: }
 00000016  4770      BX          R14
 00000018          ENDP ; 'DelayMS?T'


*** CODE SEGMENT '?PR?UART1_Init?T?UART_utility':
   40: void UART1_Init(unsigned int _baudrate)
 00000000  B500      PUSH        {LR}
 00000002  ---- Variable '_baudrate' assigned to Register 'R0' ----
   41: {
 00000002            ; SCOPE-START
   43:     u1dl = _PCLK/(16*_baudrate);    // Calculate for U1DL value
 00000002  1C01      MOV         R1,R0 ; _baudrate
 00000004  0109      LSL         R1,R1,#0x4 ; _baudrate
 00000006  4800      LDR         R0,=0x1C9C380
 00000008  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000000A  FFFA      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000000C  1C08      MOV         R0,R1
 0000000E  0401      LSL         R1,R0,#0x10
 00000010  0C09      LSR         R1,R1,#0x10
 00000012  ---- Variable 'u1dl' assigned to Register 'R1' ----
   44:     PINSEL0 |= 0x00050000;  // Enable rx,tx
 00000012  4800      LDR         R3,=0x50000
 00000014  4800      LDR         R0,=0xE002C000
 00000016  6802      LDR         R2,[R0,#0x0]
 00000018  431A      ORR         R2,R3
 0000001A  6002      STR         R2,[R0,#0x0]
   45:     U1LCR = 0x00000083;     // 8 bit data,1 stop bit,no parity bit
 0000001C  2283      MOV         R2,#0x83
 0000001E  4800      LDR         R0,=0xE001000C
 00000020  7002      STRB        R2,[R0,#0x0]
   46:     U1DLL = u1dl & 0xFF;    // U1DL for low byte
ARM COMPILER V2.53,  UART_utility                                                          03/05/13  17:42:39  PAGE 4   

 00000022  1C08      MOV         R0,R1 ; u1dl
 00000024  0402      LSL         R2,R0,#0x10 ; u1dl
 00000026  0C12      LSR         R2,R2,#0x10
 00000028  20FF      MOV         R0,#0xFF
 0000002A  4002      AND         R2,R0
 0000002C  0612      LSL         R2,R2,#0x18
 0000002E  0E12      LSR         R2,R2,#0x18
 00000030  4800      LDR         R0,=0xE0010000
 00000032  7002      STRB        R2,[R0,#0x0]
   47:     U1DLM = (u1dl>>8);      // U1DL for high byte
 00000034  1C08      MOV         R0,R1 ; u1dl
 00000036  0401      LSL         R1,R0,#0x10 ; u1dl
 00000038  0C09      LSR         R1,R1,#0x10
 0000003A  0A09      LSR         R1,R1,#0x8
 0000003C  0609      LSL         R1,R1,#0x18
 0000003E  0E09      LSR         R1,R1,#0x18
 00000040  4800      LDR         R0,=0xE0010004
 00000042  7001      STRB        R1,[R0,#0x0]
   48:     U1LCR = 0x00000003;     // DLAB =0
 00000044  2103      MOV         R1,#0x3
 00000046  4800      LDR         R0,=0xE001000C
 00000048  7001      STRB        R1,[R0,#0x0]
 0000004A            ; SCOPE-END
   49: }
 0000004A  BC08      POP         {R3}
 0000004C  4718      BX          R3
 0000004E          ENDP ; 'UART1_Init?T'


*** CODE SEGMENT '?PR?UART1_PutC?T?UART_utility':
   53: void UART1_PutC(char c)
 00000000  B500      PUSH        {LR}
 00000002  1C02      MOV         R2,R0 ; c
 00000004  ---- Variable 'c' assigned to Register 'R2' ----
   55:     while(!(U1LSR & 0x20)); // Wait until UART1 ready to send character     
 00000004          L_11:
 00000004  4800      LDR         R0,=0xE0010014
 00000006  7800      LDRB        R0,[R0,#0x0]
 00000008  2120      MOV         R1,#0x20
 0000000A  4208      TST         R0,R1
 0000000C  D0FA      BEQ         L_11  ; T=0x00000004
   56:     U1THR = c; 
 0000000E  1C11      MOV         R1,R2 ; c
 00000010  4800      LDR         R0,=0xE0010000
 00000012  7001      STRB        R1,[R0,#0x0]
   57:     DelayMS();               // Send character
 00000014  F7FF      BL          DelayMS?T  ; T=0x0001  (1)
 00000016  FFF4      BL          DelayMS?T  ; T=0x0001  (2)
   58: }
 00000018  BC08      POP         {R3}
 0000001A  4718      BX          R3
 0000001C          ENDP ; 'UART1_PutC?T'


*** CODE SEGMENT '?PR?UART1_PutS?T?UART_utility':
   62: void UART1_PutS(char *p)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; p
 00000004  ---- Variable 'p' assigned to Register 'R4' ----
   64:     while(*p) // Point to character
 00000004  E004      B           L_15  ; T=0x00000010
 00000006          L_17:
   66:         UART1_PutC(*p++);   // Send character then point to next character
 00000006  1C20      MOV         R0,R4 ; p
 00000008  3401      ADD         R4,#0x1
 0000000A  7800      LDRB        R0,[R0,#0x0] ; p
 0000000C  F7FF      BL          UART1_PutC?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          UART1_PutC?T  ; T=0x0001  (2)
   67:     }
 00000010          L_15:
ARM COMPILER V2.53,  UART_utility                                                          03/05/13  17:42:39  PAGE 5   

 00000010  1C20      MOV         R0,R4 ; p
 00000012  7800      LDRB        R0,[R0,#0x0] ; p
 00000014  2800      CMP         R0,#0x0
 00000016  D1F6      BNE         L_17  ; T=0x00000006
   68: }
 00000018  BC10      POP         {R4}
 0000001A  BC08      POP         {R3}
 0000001C  4718      BX          R3
 0000001E          ENDP ; 'UART1_PutS?T'


*** CODE SEGMENT '?PR?UART0_Init?T?UART_utility':
   72: void UART0_Init(unsigned int _baudrate)
 00000000  B500      PUSH        {LR}
 00000002  ---- Variable '_baudrate' assigned to Register 'R0' ----
   73: {
 00000002            ; SCOPE-START
   75:     u0dl = _PCLK/(16*_baudrate); // Calculate for U0DL value
 00000002  1C01      MOV         R1,R0 ; _baudrate
 00000004  0109      LSL         R1,R1,#0x4 ; _baudrate
 00000006  4800      LDR         R0,=0x1C9C380
 00000008  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000000A  FFFA      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000000C  1C08      MOV         R0,R1
 0000000E  0401      LSL         R1,R0,#0x10
 00000010  0C09      LSR         R1,R1,#0x10
 00000012  ---- Variable 'u0dl' assigned to Register 'R1' ----
   76:     PINSEL0 |= 0x00000005;  // Enable rx,tx
 00000012  2305      MOV         R3,#0x5
 00000014  4800      LDR         R0,=0xE002C000
 00000016  6802      LDR         R2,[R0,#0x0]
 00000018  431A      ORR         R2,R3
 0000001A  6002      STR         R2,[R0,#0x0]
   77:     U0LCR = 0x00000083;     // 8 bit data,1 stop bit,no parity bit
 0000001C  2283      MOV         R2,#0x83
 0000001E  4800      LDR         R0,=0xE000C00C
 00000020  7002      STRB        R2,[R0,#0x0]
   78:     U0DLL = u0dl & 0xFF;    // U0DL for low byte
 00000022  1C08      MOV         R0,R1 ; u0dl
 00000024  0402      LSL         R2,R0,#0x10 ; u0dl
 00000026  0C12      LSR         R2,R2,#0x10
 00000028  20FF      MOV         R0,#0xFF
 0000002A  4002      AND         R2,R0
 0000002C  0612      LSL         R2,R2,#0x18
 0000002E  0E12      LSR         R2,R2,#0x18
 00000030  4800      LDR         R0,=0xE000C000
 00000032  7002      STRB        R2,[R0,#0x0]
   79:     U0DLM = (u0dl>>8);      // U0DL for high byte
 00000034  1C08      MOV         R0,R1 ; u0dl
 00000036  0401      LSL         R1,R0,#0x10 ; u0dl
 00000038  0C09      LSR         R1,R1,#0x10
 0000003A  0A09      LSR         R1,R1,#0x8
 0000003C  0609      LSL         R1,R1,#0x18
 0000003E  0E09      LSR         R1,R1,#0x18
 00000040  4800      LDR         R0,=0xE000C004
 00000042  7001      STRB        R1,[R0,#0x0]
   80:     U0LCR = 0x00000003;     // DLAB =0
 00000044  2103      MOV         R1,#0x3
 00000046  4800      LDR         R0,=0xE000C00C
 00000048  7001      STRB        R1,[R0,#0x0]
 0000004A            ; SCOPE-END
   81: }
 0000004A  BC08      POP         {R3}
 0000004C  4718      BX          R3
 0000004E          ENDP ; 'UART0_Init?T'


*** CODE SEGMENT '?PR?UART0_PutC?T?UART_utility':
   85: void UART0_PutC(char c)
 00000000  B500      PUSH        {LR}
ARM COMPILER V2.53,  UART_utility                                                          03/05/13  17:42:39  PAGE 6   

 00000002  1C02      MOV         R2,R0 ; c
 00000004  ---- Variable 'c' assigned to Register 'R2' ----
   87:     while(!(U0LSR & 0x20)); // Wait until UART0 ready to send character  
 00000004          L_19:
 00000004  4800      LDR         R0,=0xE000C014
 00000006  7800      LDRB        R0,[R0,#0x0]
 00000008  2120      MOV         R1,#0x20
 0000000A  4208      TST         R0,R1
 0000000C  D0FA      BEQ         L_19  ; T=0x00000004
   88:     U0THR = c; // Send character
 0000000E  1C11      MOV         R1,R2 ; c
 00000010  4800      LDR         R0,=0xE000C000
 00000012  7001      STRB        R1,[R0,#0x0]
   89:     DelayMS();
 00000014  F7FF      BL          DelayMS?T  ; T=0x0001  (1)
 00000016  FFF4      BL          DelayMS?T  ; T=0x0001  (2)
   90: }
 00000018  BC08      POP         {R3}
 0000001A  4718      BX          R3
 0000001C          ENDP ; 'UART0_PutC?T'


*** CODE SEGMENT '?PR?UART0_PutS?T?UART_utility':
   94: void UART0_PutS(char *p)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; p
 00000004  ---- Variable 'p' assigned to Register 'R4' ----
   96:     while(*p) // Point to character
 00000004  E004      B           L_23  ; T=0x00000010
 00000006          L_25:
   98:         UART0_PutC(*p++);  // Send character then point to next character
 00000006  1C20      MOV         R0,R4 ; p
 00000008  3401      ADD         R4,#0x1
 0000000A  7800      LDRB        R0,[R0,#0x0] ; p
 0000000C  F7FF      BL          UART0_PutC?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          UART0_PutC?T  ; T=0x0001  (2)
   99:     }
 00000010          L_23:
 00000010  1C20      MOV         R0,R4 ; p
 00000012  7800      LDRB        R0,[R0,#0x0] ; p
 00000014  2800      CMP         R0,#0x0
 00000016  D1F6      BNE         L_25  ; T=0x00000006
  100: }
 00000018  BC10      POP         {R4}
 0000001A  BC08      POP         {R3}
 0000001C  4718      BX          R3
 0000001E          ENDP ; 'UART0_PutS?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
